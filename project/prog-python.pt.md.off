+++
# Date this page was created.  date = "2017-02-17"

# Project title.
title = "Programação em Python"

# Project summary to display on homepage.
summary = ""

# Optional image to display on homepage (relative to `static/img/` folder).
image_preview = ""

# Tags: can be used for filtering projects.
# Example: `tags = ["machine-learning", "deep-learning"]`
tags = ["cefet-rj", "cursos", "prog-python", "graduacao"]

# Optional external URL for project (replaces project detail page).
external_link = ""

# Does the project detail page use math formatting?
math = true

# Optional featured image (relative to `static/img/` folder).
[header]
image = ""
caption = ""

+++

## Avisos

* 30/06/2017, 01:50: correção dos arquivos calculadora.in e calculadora.out
* Diretrizes dos projeto 'Plotter' e 'Calculadora' divulgadas.
* Todos os projetos são individuais.
* O envio dos projetos deve ocorrer até 07/07/2017, 0:00.

## Projeto 'Plotter'

Uma aplicação para desktop que mostrará gráficos de funções daadas suas especificações.

* O arquivo-fonte principal da aplicação deve ter o nome **plotter.py**;
* A aplicação terá uma única tela;
* Na tela haverá uma caixa de texto para cada uma das seguintes informações: especificação das funções a serem apresentadas, rótulo do eixo X, rótulo do eixo Y, título do gráfico;
* Haverá também um botão que disparará a produção do gráfico;
* O intervalo no qual as funções serão consideradas (i.e., o intervalo de x) será indicado através de outras duas caixas de texto, uma para o limite inferior e outra para o limite superior deste intervalo;
* As funções serão indicadas uma por linha na caixa de texto destinada a isso;
* O formato 1 para especificar funções são números separados por espaços, que representam os coeficientes da função: e.g., '2 -3 5 -7' $\to 2x^3 - 3x^2 + 5x - 7$;
* O formato 2 é aquele no qual as raízes da função são indicadas: e.g., 'r:7 -2 9' $\to (x - 7)(x + 2)(x - 9)$;
* No gráfico estarão presentes linhas-guias, como uma grade, facilitando assim a leitura do gráfico;
* Haverá uma legenda indicando a função a que se refere cada uma das curvas no gráfico.

Além das funcionalidades acima listadas, a organização (mas não a estética em si, mas a praticidade de uso) dos elementos da GUI também serão avaliados. Utilize os layouts e as opções dos elementos gráficos com sabedoria.

Para fins de referência, os seguintes módulos e funções de python devem ser úteis na realização desta tarefa: kivy, numpy, pylab, numpy.linspace, numpy.poly1d, pylab.xlim, pylab.xlabel, pylab.ylabel, pylab.title, pylab.plot, pylab.legend, pylab.grid.

## Projeto 'Calculadora'

Um script interativo que calcula o valor de expressões matemáticas simples. Diretrizes:

* O script deve ter o nome **calculadora.py**;
* Ao ser executado como **python3 calculadora.py** e receber os conandos no arquivo [calculadora.in](calculadora/calculadora.in), a saída do script deve ser similar àquela do arquivo [calculadora.out](calculadora/calculadora.out);
* O script deverá ser capaz de computar o valor de expressões aritiméticas baseados nos operadores +, -, \*, / e \*\*;
* Não deveá ser considerada qualquer regra de precedência entre os operadores;
* Deve ser permitida a atribuição de valore e uso posterior de variáveis.

Os arquivos indicados acima (calculadora.in, calculadora.out) fornecem as orientações básicas sobre o funcionamento do script calculadora.py. Todavia, outros casos de teste podem ser usados na avaliação dos projetos desenvolvidos.

## Projeto 'Agenda'

Uma implementação de uma agenda simples em Python. Deve atender as seguintes diretrizes básicas:

* O script deve ter o nome **agenda.py**;
* Ao ser executado como **python3 agenda.py [agenda.db](agenda/agenda.db)** e receber os comandos no arquivo [agenda.in](agenda/agenda.in), a saída do script deve ser similar àquela do arquivo [agenda.out](agenda/agenda.out) e o conteúdo do arquivo agenda.db será modificado de forma similar ao arquivo [agenda_pos.db](agenda/agenda_pos.db);
* Com o arquivo agenda.db gerado no item anterior (ou seja, similar ao arquivo agenda_pos.db), ao executar o script [teste_agenda.py](agenda/teste_agenda.py), a saída produzida deve ser semelhante ao arquivo [teste_agenda.out](agenda/teste_agenda.out);
* Ao recuperar contatos na agenda, sejam todos ou apenas um subconjunto destes, eles devem ser **idealmente** (ou seja, o quanto mais próximo disso, melhor) exibidos em ordem alfabética e sem diferenciar caracteres maiúsculos e minúsculos;
* O arquivos teste_agenda.py contém comentários com orientações sobre o comportamento esperado dos elementos implementados.

Os arquivos indicados acima (agenda.db, agenda_pos.db, agenda.in, agenda.out, teste_agenda.py, teste-agenda.out) fornecem as orientações básicas sobre o funcionamento do script agenda.py. Todavia, outros casos de teste podem ser usados na avaliação dos projetos desenvolvidos.

Em caso de dúvidas, não deixe de esclarecê-las! Comunique-se!

## Links úteis

* https://docs.python.org/3.6/tutorial/index.html
* https://www.sololearn.com/Course/Python/
